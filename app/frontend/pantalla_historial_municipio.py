from PyQt5.QtWidgets import QWidget, QApplication, QMessageBox, QTableWidget, QComboBox, QTableWidgetItem
from app.frontend.pantalla_historial_municipio_ui import Ui_Form  # Import generated class from Qt Designer
import sys
from io import BytesIO
import requests
import pandas as pd
import asyncio

class PantallaHistorialMunicipio(QWidget):
    def __init__(self, change_screen_func, logout, session, parent=None):
        super().__init__(parent)

        # Instantiate UI generated by Qt Designer
        self.ui = Ui_Form()
        self.ui.setupUi(self)
        self.session = session
        self.change_screen = change_screen_func
        self.logout = logout
        self.table = self.findChild(QTableWidget, "Table")
        self.select1 = self.findChild(QComboBox, "Select1")

        # Setup connections for buttons and ComboBox
        self.setup_connections()

    def excel_read(self):
        """Fetch client data in Excel format from the API and load it into the table."""
        try:
            response = self.session.get("http://127.0.0.1:5000/api/export/excel")
            
            if response.status_code == 200:
                self.excel_data = pd.read_excel(BytesIO(response.content))
                
                # Populate the table with fetched data and populate ComboBox
                self.populate_table()
                self.populate_combobox()
            else:
                QMessageBox.critical(self, "Error", f"Failed to load data: {response.status_code}")
        
        except requests.RequestException as e:
            QMessageBox.critical(self, "Error", f"Request error: {e}")

    def setup_connections(self):
        # Connect QLabel navigation options
        self.ui.menuOption1.mousePressEvent = lambda event: self.label_clicked(event, "menuOption1")
        self.ui.menuOption2.mousePressEvent = lambda event: self.label_clicked(event, "menuOption2")
        self.ui.menuOption3.mousePressEvent = lambda event: self.label_clicked(event, "menuOption3")
        self.ui.menuOption4.mousePressEvent = lambda event: self.label_clicked(event, "menuOption4")
        self.ui.menuOption5.mousePressEvent = lambda event: self.label_clicked(event, "menuOption5")
        self.ui.menuOption6.mousePressEvent = lambda event: self.label_clicked(event, "menuOption6")
        self.ui.menuOption7.mousePressEvent = lambda event: self.label_clicked(event, "menuOption7")
        self.ui.menuOption8.mousePressEvent = lambda event: self.label_clicked(event, "menuOption8")
        self.ui.ClienteText.mousePressEvent = lambda event: self.label_clicked(event, "ClienteText")
        self.ui.ComunidadText.mousePressEvent = lambda event: self.label_clicked(event, "ComunidadText")
        self.ui.MunicipioText.mousePressEvent = lambda event: self.label_clicked(event, "MunicipioText")
        self.ui.AntenaText.mousePressEvent = lambda event: self.label_clicked(event, "AntenaText")
        self.ui.globaltext.mousePressEvent = lambda event: self.label_clicked(event, "globaltext")
        self.ui.menuOption7_2.mousePressEvent = lambda event: self.label_clicked(event, "menuOption7_2")
        
        # Connect ComboBox to filter method
        self.select1.currentIndexChanged.connect(self.filter_by_municipio)

    def label_clicked(self, event, label_name):
        # Screen change logic based on label clicked
        screen_mappings = {
            "menuOption1": 1, "menuOption2": 4, "menuOption3": 7,
            "menuOption4": 10, "menuOption5": 13, "menuOption6": 18,
            "menuOption7": 19,  "menuOption8" : 23, "ClienteText": 13, "ComunidadText": 14,
            "MunicipioText": 15, "AntenaText": 16, "globaltext": 17
        }
        if label_name == "menuOption7_2":
            self.logout()
        elif label_name in screen_mappings:
            self.change_screen(screen_mappings[label_name])

    def filter_by_municipio(self):
        """Filter table rows based on the selected municipio in the ComboBox."""
        selected_municipio = self.select1.currentText()
        if selected_municipio == "Seleccionar Municipio":
            self.ui.Table.clearContents()
            self.ui.Table.setRowCount(0)
            return
        
        filtered_data = self.excel_data[self.excel_data['Municipio'] == selected_municipio]
        filtered_data.reset_index(drop=True, inplace=True)

        self.display_table_data(filtered_data)

    def populate_table(self):
        """Populate the table with Excel data."""
        if self.excel_data is not None:
            self.ui.Table.setColumnCount(len(self.excel_data.columns))
            self.ui.Table.setHorizontalHeaderLabels(self.excel_data.columns.tolist())  # Set column headers
                
            self.ui.Table.setRowCount(len(self.excel_data))
            for row in range(len(self.excel_data)):
                for column in range(len(self.excel_data.columns)):
                    self.ui.Table.setItem(row, column, QTableWidgetItem(str(self.excel_data.iat[row, column])))

        else:
            QMessageBox.critical(self, "Error", "No Excel data available to populate the table.")

    def display_table_data(self, data):
        """Populate the table with filtered data."""
        self.ui.Table.setRowCount(0)  # Clear previous data
        
        if data.empty:
            return  # Exit if there's no data to display
        
        for row_num, row_data in data.iterrows():
            self.ui.Table.insertRow(row_num)
            for col_num, value in enumerate(row_data):
                self.ui.Table.setItem(row_num, col_num, QTableWidgetItem(str(value)))

    def populate_combobox(self):
        """Populate combobox with unique 'Municipio' values from the DataFrame."""
        if self.excel_data is not None and "Municipio" in self.excel_data.columns:
            municipios = self.excel_data["Municipio"].dropna().astype(str).unique()
            self.ui.Select1.clear()
            self.ui.Select1.addItem("Seleccionar Municipio")  # Blank item for all data
            self.ui.Select1.addItems(sorted(municipios))
        else:
            QMessageBox.critical(self, "Error", "No Municipio data found or 'nombre_municipio' column missing.")